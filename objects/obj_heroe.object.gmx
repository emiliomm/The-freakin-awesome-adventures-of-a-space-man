<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_heroe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inicializar las variables
nv = obj_nv.nv; //Nivel del heroe
grav = 0.2; //0.2 , cuanto más alta, menos alto salta
hsp = 0; //Velocidad horizontal
hsp_carry = 0; //Velocidad de la plataforma móvil (si va montado)
vsp = 0; //Velocidad vertical

saltos = 0; //Número de saltos actual
if (nv &lt; 4)
    saltosmax = 1; //Número máximo de saltos permitidos
else
    saltosmax = 2; //Número máximo de saltos permitidos

msp_normal = 4; //Velocidad de movimiento
msp_pwfantasma = 2; //Velocidad de movimiento fantasma
msp_pwveloz = 8 //Velocidad de movimiento powerup velocidad
msp_pwastro = 1.5; //Velocidad de movimiento del pwastro
msp_pwagua_tierra = 1; //Velocidad de movimiento del pwagua caminando en el suelo

msp = msp_normal;

jsp_normal = 5; //Velocidad de salto
jsp_pwsalto = 6; //Velocidad de salto con powerup salto
jsp_pwastro = 2; //Velocidad de salto con powerup astro
jsp_pwfantasma = 4; //Velocidad de salto con powerup fantasma
jsp_pwagua = 2; //Velocidad de salto con powerup agua

jsp = jsp_normal;

friccion = 1.4;
friccion_actual = friccion;

direccion = 0; //Utilizada al disparar
tecla_abajo = 0; //La iniciamos a 0 porque va a ser necesario acceder desde otro objeto
escalera = false;
saltopared = 0;
invencible = 0; //Al darle o hacer algo, el personaje no reacciona a nada unos pocos segundos
gravedad_inv = false;

if (global.checkpointR == room)
{
    x = global.checkpointx;
    y = global.checkpointy;
}

if (global.door == true)
{
    x = global.doorx;
    y = global.doory;
}

//El heroe está por encima de todo
depth = -100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Salto de pared
if place_meeting(x,y+1,obj_bloque) || place_meeting(x+1,y,obj_bloque) || place_meeting(x-1,y,obj_bloque) || -tecla_izquierda || tecla_derecha || tecla_salto
{
    saltopared = 0;
    if (tecla_salto &amp;&amp; nv &gt; 3)
    {
        vsp = -jsp;
        saltos -= 1;
        sound_play(snd_salto);
    }
}
else
    alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invencible
invencible = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Soporte joystick
if (global.joystick1_supported) { scr_joystick_support(); }

//Botones pulsados y gamepad
    tecla_derecha = keyboard_check(ord("D")); // (0 a 1)
    tecla_izquierda = -keyboard_check(ord("A")); // (0 a -1)
    tecla_salto = keyboard_check_pressed(ord("W"));
    tecla_arriba = keyboard_check(ord("W"));
    tecla_abajo = keyboard_check(ord("S"));
    tecla_disparo = keyboard_check_pressed(vk_space) || mouse_check_button_released(mb_left);
    tecla_accion =  keyboard_check_pressed(ord("E"));
    
//Reacción a las teclas
if saltopared == 0
{
    movimiento = tecla_izquierda + tecla_derecha; //Dice la dirección del movimiento
    
if (tecla_derecha) //Cambiamos la dirección utilizada para el disparo y el hielo
    direccion = 0;
if (-tecla_izquierda)
    direccion = 180;
}
    
if (saltopared == 0)
    hsp = movimiento *  msp;
else
{
    if direccion == 180
    {
        hsp = -msp;
        
    }
    else
    {
        hsp = msp;
        
    }
}


//Cambio direccion sprite (mueve el sprite 1 pixel hacia el lado, tener siempre arriba del codigo de colisión)
if (movimiento != 0)
    image_xscale = movimiento; //Depende de la dirección del movimiento, orienta el sprite
else if (saltopared == 1)
{
    if direccion == 180
    {
        image_xscale = -1;
    }
    else
    {
        image_xscale = 1;
    }
}

if(vsp &lt; 10)// Para que el salto no sea infinito
    vsp += grav;

var hsp_final = hsp + hsp_carry; //Suma la velocidad sobre plataforma a la v.normal
hsp_carry = 0; //Igualamos a cero la v.sobre plataforma para que no siga sumando

//Colisiones

//Salto en pared
if (tecla_salto) &amp;&amp; !place_meeting(x,y+1,obj_bloque) &amp;&amp; (place_meeting(x-1,y,obj_bloque) || place_meeting(x+1,y,obj_bloque)) &amp;&amp; nv &gt; 2 //Cuando es fantasma no puede saltar por las paredes
{
    saltos = saltosmax - 1; //Recuperamos todos los saltos
    sound_play(snd_salto);
    vsp = -jsp;
    movimiento = 0;
    saltopared = 1;
    if direccion == 180
    {
        direccion = 0
    }
    else
    {
        direccion = 180
    }
    alarm[3] = 10;
}

//Muelle       
if (place_meeting(x,y,obj_muelle))//Cuando es fantasma no puede usar el muelle
{
    vsp = -jsp*1.5;
}

if (place_meeting(x,y,obj_boss3))//Cuando es fantasma no puede usar el muelle
{
    if !(y &lt; obj_boss3.y - 4)
        scr_death();
}

//Colision enemigos
var inst = instance_place(x,y,obj_enemigo);
if (inst &amp;&amp; invencible != 1 &amp;&amp; inst.muerto == 0)
{
    if inst.aplastable == 0
    {
        scr_death();
    }
    else if inst.aplastable == 1
    {
        if (y &lt; inst.y - 4) //Colisiona por encima
        {
            vsp = -jsp; //Saltamos
            with (inst)
                instance_destroy(); //Destruimos el enemigo
        }
        else //Colisionamos por otro lado (morimos)
        {
            scr_death();
        }
    }
}

if place_meeting(x,y,obj_piranha) &amp;&amp; invencible != 1 &amp;&amp; obj_piranha.muerto == 0
{
    scr_death();
}

if place_meeting(x,y+1,obj_boss3) &amp;&amp; invencible != 1
{
    if (y &lt; obj_boss3.y) //Colisiona por encima
        {
            vsp = -jsp; //Saltamos
            with (obj_boss3)
            {
                if tocada = 0
                    vida--;
                tocada = 1;
                msp = 0;
                alarm[0] = 60;
            }
        }
}

if (place_meeting(x,y,obj_bala_enemiga)) &amp;&amp; invencible != 1
{
    scr_death();
}

//Colisión horizontal
if (place_meeting(x+hsp_final,y,obj_bloque))
{
    yplus = 0;
    while(place_meeting(x+hsp_final,y-yplus,obj_bloque) &amp;&amp; yplus &lt;= abs(1*hsp_final)) //Comprueba si nos podemos mover
        yplus += 1;
    if place_meeting(x+hsp_final,y-yplus,obj_bloque) //Si colisionamos con un bloque normal
    {
        while(!place_meeting(x+sign(hsp_final),y,obj_bloque)) //sign -1 o +1 Si no hay un muro a la derecha o a la izquierda
            x += sign(hsp_final); //Nos movemos
        hsp_final = 0;
        hsp = 0;
    }
    else
    {
        y -= yplus;
    }
}

x += hsp_final;

//Salto
if place_meeting(x,y+1,obj_bloque) &amp;&amp; nv &gt; 0 //Comprueba si el pixel de abajo es un bloque
//Si lo es, puede saltar, si está en el aire, no puede saltar
{
    saltos = saltosmax;
}

if (tecla_salto &amp;&amp; saltos &gt; 0)
{
        if !place_meeting(x,y-1,obj_bloque) &amp;&amp; saltopared == 0
        {
            if place_meeting(x,y+1,obj_bloque)
            {
                vsp = -jsp;
                saltos -= 1;
                sound_play(snd_salto);
            }
            else if !place_meeting(x,y+1,obj_bloque)
            {
                if (saltos == saltosmax) &amp;&amp; saltos &gt; 1
                {
                    vsp = -jsp;
                    saltos -= 2;
                    sound_play(snd_salto);
                }
                else if saltos != saltosmax
                {
                    vsp = -jsp;
                    saltos -= 1;
                    sound_play(snd_salto);
                }
            }
            
            y--;
        }
        
        //Cambiamos el estado de los bloques de salto al saltar
        if instance_exists(obj_bloque_salto)
        {
            if (obj_bloque_salto.estado == 0)
                obj_bloque_salto.estado = 1;
            else if (obj_bloque_salto.estado == 1)
                obj_bloque_salto.estado = 0;
        }       
}


//Salto gravedad invertida
if (place_meeting(x,y-1,obj_bloque) &amp;&amp; gravedad_inv == true)
    if (tecla_salto)
    {
        sound_play(snd_salto);
        vsp = -jsp;
    }

//Escalera
if(tecla_arriba || tecla_abajo) //El fantasma no puede subir escaleras
{
    if place_meeting(x,y,obj_escalera) &amp;&amp; !place_meeting(x,y+1,obj_bloque) &amp;&amp; instance_exists(self)
        escalera = true;
}

if (escalera)
{
    vsp = 0;
    hsp_final = 0;
    if (tecla_arriba) &amp;&amp; !place_meeting(x,y-2,obj_bloque)
        vsp = -2;
    if (tecla_abajo) &amp;&amp; !place_meeting(x,y+2,obj_bloque)
        vsp = 2;
    if (!place_meeting(x,y,obj_escalera) || tecla_derecha || -tecla_izquierda)
        escalera = false;
}

//Colisión vertical
if (place_meeting(x,y+vsp,obj_bloque))
{
    while(!place_meeting(x,y+sign(vsp),obj_bloque)) //Si no hay nada arriba o abajo
        y += sign(vsp); //Nos movemos
    vsp = 0;
}


y += vsp;

//Disparo
if (tecla_disparo &amp;&amp; nv &gt; 1)
{
    if (invencible == 0)
    //El fantasma no puede disparar
    //Al salir del delfin tampoco
    {
        with (instance_create(x, y, obj_bala))
        {
            sound_play(snd_disparo);
            speed = 8;
            direction = obj_heroe.direccion; //Dirección en la que mira el heroe
            if (obj_heroe.direccion == 0)
                image_xscale = 1;
            else
                image_xscale = -1;
        }
    }
}

//Animación (para que las físicas funcionen correctamente, todos los sprites deben tener idéntica máscara de colisión, editar en cada sprite manualmente)
//Powerups
if (place_meeting(x,y+1,obj_bloque))
{
    if (hsp != 0)
    {
            sprite_index = spr_heroe_correr;
            image_speed = 1/4;
        
    }
    else
    {   
            sprite_index = spr_heroe;
        
    }
}
else if (place_meeting(x+1,y,obj_bloque) || place_meeting(x-1,y,obj_bloque))
{
    if (vsp != 0)
    {
        
            sprite_index = spr_heroe_pared;
        
    }
    else
    {
        
            sprite_index = spr_heroe;
        
    }
}
else if(escalera)
{
    if (tecla_arriba || tecla_abajo)
    {
        sprite_index = spr_heroe_escalera;
        image_speed = 1/8
    }
    else
    {
        sprite_index = spr_heroe_escalera;
        image_speed = 0; //No se anima
    }
        
}
else
{
    if (vsp &lt; 0) //estamos saltando
    {
        
            sprite_index = spr_heroe_salto;
        
    }
    else
    {
        
            sprite_index = spr_heroe_cae;
        
    }
}

//Movemos el fondo
background_x[0] += 0.3;
background_x[1] = view_xview[view_current]*0.5;
background_x[2] = view_xview[view_current]*0.40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_death();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.font2);
draw_text(32,30,string(scr_nivel_actual(2)));
draw_text(570,30,global.puntuacion);
display_set_gui_size(640,480);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (invencible == 0)
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
else
{
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, image_blend, 0.5);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,15</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
