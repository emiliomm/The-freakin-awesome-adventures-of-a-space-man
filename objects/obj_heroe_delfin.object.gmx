<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_heroe_delfin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_heroe</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Soporte joystick
if (global.joystick1_supported) { scr_joystick_support(); }

//Movimiento
tecla_derecha = keyboard_check(ord("D")); // (0 a 1)
tecla_izquierda = keyboard_check(ord("A")); // (0 a -1)
tecla_arriba = keyboard_check(ord("W"));
tecla_abajo = keyboard_check(ord("S"));

if (tecla_arriba &amp;&amp; !place_meeting(x,y-5,obj_bloque))
{
    y-=5;
}
if (tecla_abajo &amp;&amp; !place_meeting(x,y+5,obj_bloque))
{
    y+=5;
}
if (tecla_izquierda &amp;&amp; !place_meeting(x-5,y,obj_bloque))
{
    x-=5;
}
if (tecla_derecha &amp;&amp; !place_meeting(x+5,y,obj_bloque))
{
    x+=5;
}

movimiento = -tecla_izquierda + tecla_derecha; //Dice la dirección del movimiento

if (keyboard_check(ord("D"))) //Cambiamos la dirección utilizada para la direccion del delfin al desmontar
    direccion = 0;
if (keyboard_check(ord("A")))
    direccion = 180;
    
//Desmontar
if (keyboard_check_pressed(vk_space) || mouse_check_button_released(mb_left))
{
    instance_change(obj_heroe_pwagua, false);
    with (obj_heroe_pwagua)//El heroe
    {
        invencible = 1;
        alarm[1] = 60; //Tiempo del powerup (seg = n/fps)
    }
    instance_create(x,y, obj_delfin);
    with(obj_delfin) //El delfin se crea con la orientacion adecuada
    {
        if (obj_heroe_delfin.direccion == 180)
            image_xscale = -1;
        else if (obj_heroe_delfin.direccion == 0)
            image_xscale = 1;
    }
    
    //Ponemos las variables de movimiento a cero para que no surgan fallos
    vsp = 0;
    hsp_final = 0;
}

//Enemigos
if ((place_meeting(x,y,obj_enemigo)) || (place_meeting(x,y,obj_bala_enemiga)) || (place_meeting(x,y,obj_piranha))) &amp;&amp; ((obj_enemigo.muerto == 0) || (obj_piranha.muerto == 0))
{
    instance_change(obj_heroe_pwagua, false);
    with (obj_heroe_pwagua)//El heroe
    {
        invencible = 1;
        alarm[1] = 120; //Twdiempo del powerup (seg = n/fps)
    }

    //Ponemos unos valores pequeños para no generar errores
    hsp_final = 1;
    vsp = 1;
}

//Animación
image_speed = 1/16;
    
if (movimiento != 0)
    image_xscale = movimiento; //Depende de la dirección del movimiento, orienta el sprite
    
//Movemos el fondo
background_x[0] += 0.3;
background_x[1] = view_xview[view_current]*0.5;
background_x[2] = view_xview[view_current]*0.40;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>35,18</point>
    <point>35,35</point>
  </PhysicsShapePoints>
</object>
